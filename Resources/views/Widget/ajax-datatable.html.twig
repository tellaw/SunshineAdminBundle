{% if filtersForm is defined and filtersForm %}
    {% form_theme filtersForm 'TellawSunshineAdminBundle:Form:filterFields.html.twig'%}
{% endif %}
<div class="m-portlet m-portlet--mobile {{ widgetName }}-portlet">
    <div class="m-portlet__head">
        {% if widget.title is defined %}
            <div class="m-portlet__head-caption">
                <div class="m-portlet__head-title">
                    <h3 class="m-portlet__head-text">{{ widget.title }}</h3>
                </div>
            </div>
        {% else %}
            <div class="m-portlet__head-caption">
                <div class="m-portlet__head-title">
                    <h3 class="m-portlet__head-text">{{ entityName | trans }}</h3>
                </div>
            </div>
        {% endif %}
    </div>
    <div class="m-portlet__body">
        <div class="form-group m-form__group row align-items-center">
            <div class="col-lg-6">
                <div class="m-input-icon m-input-icon--left">
                    <input type="text" class="form-control m-input m-input--solid" placeholder="Recherchez..." value="{{ generalSearch|default('') }}" id="m_form_search">
                    <span class="m-input-icon__icon m-input-icon__icon--left"><span><i class="la la-search"></i></span></span>
                </div>
            </div>

            {% if (showAddButton is not defined or showAddButton == true)? true : false %}
                {% if widget.parameters.newRoute is defined %}
                    <div class="col-xl-6 order-1 order-xl-2 m--align-right">
                        <a href="{{ path(widget.parameters.newRoute, {'entityName': entityName}) }}" class="btn btn-accent m-btn m-btn--custom m-btn--icon m-btn--air m-btn--pill">
                            <span><i class="la la-cart-plus"></i><span>Créer un élément</span></span>
                        </a>
                        <div class="m-separator m-separator--dashed d-xl-none"></div>
                    </div>
                {% else %}
                    <div class="col-xl-6 order-1 order-xl-2 m--align-right">
                        <a href="{{ path('sunshine_page_new', {'entityName': entityName}) }}" class="btn btn-accent m-btn m-btn--custom m-btn--icon m-btn--air m-btn--pill">
                            <span><i class="la la-cart-plus"></i><span>Créer un élément</span></span>
                        </a>
                        <div class="m-separator m-separator--dashed d-xl-none"></div>
                    </div>
                {% endif %}
            {% endif %}
        </div>

        <div class="form-group m-form__group row align-items-center">
            <div class="col-md-12">
                {% if filtersForm is defined and filtersForm %}
                    <!-- Input field for search -->
                    <div class="m-input-icon m-input-icon--left">
                        {{ form(filtersForm) }}
                    </div>
                {% endif %}
            </div>
        </div>

        <table class="table table-striped table-bordered table-hover table-checkable dataTable no-footer"
               id="{{ widgetName }}_datatable_ajax" aria-describedby="datatable_ajax_info" role="grid">
            <thead>
            <tr role="row" class="heading">
                {% for name, field in fields %}
                    {% if field.label is defined %}
                        <th class="sorting_disabled" rowspan="1" colspan="1"> {{ field.label }} </th>
                    {% else %}
                        <th class="sorting_disabled" rowspan="1" colspan="1"> {{ name }} </th>
                    {% endif %}
                {% endfor %}
                {%  if not fields['actions'] is defined %}
                    <th>Actions</th>
                {% endif %}
            </tr>
            </thead>
        </table>

        <script type="text/javascript">

            var datatable = null;

            function buildArrayToObject(partials, value, index) {
                if (index === partials.length || partials[index] === "") {
                    return value;
                }

                var key = partials[index],
                        result = {};
                result[key] = buildArrayToObject(partials, value, index + 1)
                return result;
            }

            $(document).ready(function () {

                datatable = $('#{{ widgetName }}_datatable_ajax').mDatatable({

                    data: {
                        type: 'remote',
                        source: {
                            read: {
                                method: 'post',
                                url: "{{ path((datatable_ajax_path is defined ? datatable_ajax_path : 'sunshine_ajax_datatable_callback'), {'entity': entityName}) }}",
                            }
                        },
                        pageSize: {{ pageSize is defined ? pageSize : 20 }},
                        saveState: {
                            // save datatable state(pagination, filtering, sorting, etc) in cookie or browser webstorage
                            cookie: true,
                            webstorage: true,
                        },

                        serverPaging: true,
                        serverFiltering: true,
                        serverSorting: true,

                    },
                    // layout definition
                    layout: {
                        theme: 'default', // datatable theme
                        class: '', // custom wrapper class
                        scroll: false, // enable/disable datatable scroll both horizontal and vertical when needed.
                        footer: false, // display/hide footer
                        spinner: {
                            opacity: 0.5
                        }
                    },

                    // column based filtering (coming soon)
                    filterable: true,

                    // resize column size with mouse drag coming soon)
                    resizable: true,

                    // column sorting
                    sortable: true,

                    // Enable Pagination
                    pagination: true,

                    search: {
                        // enable trigger search by keyup enter
                        onEnter: false,
                        // input text for search
                        input: null,
                        // search delay in milliseconds
                        delay: 500,
                    },

                    {# START of Column Definition #}
                    columns: [
                        {% for key,field in fields %} {# Browse Fields and keys of fields #}

                        {# if field has a non empty template attribute, use it instead of default view #}
                        {% if field.template is defined and field.template is not empty %}
                        {
                            {% include field.template ~ '.html.twig' with  {'field':field, 'key':key, 'entityName':entityName, 'sortable' : (field.order is defined ? field.order : null) } %}
                        },
                        {% else %}
                        {# Default template #}
                        {
                            field: "{{ key }}",
                            title: "{{ field.label is defined ? field.label : key }} ",
                            sortable: "{{ field.order is defined and field.order is not iterable ? field.order : null }}"
                        },
                        {% endif %}

                        {% endfor %}

                        {# If no field "actions" is defined, then add the default one #}
                        {% if not fields['actions'] is defined %}
                        {
                            field: "action",
                            title: "Action",
                            template: function (row) {
                                {% if widget.parameters.editRoute is defined %}
                                return '<button onclick="openListLink(this)" data-url="{{ path(widget.parameters.editRoute, {'entityName':entityName}) }}/' + row.id + '" type="button" class="btn btn-primary btn-sm">Editer</button>&nbsp<button onclick="openListLink(this)" data-url="{{ path(widget.parameters.deleteRoute, {'entityName':entityName}) }}/' + row.id + '" type="button" class="btn btn-danger btn-sm" onClick="return confirm(\'Confirmez-vous la suppression ?\')">Supprimer</button>';
                                {% else %}
                                return '<button onclick="openListLink(this)" data-url="{{ path('sunshine_page_edit', {'entityName':entityName}) }}/' + row.id + '" type="button" class="btn btn-primary btn-sm">Editer</button>&nbsp;<button onclick="openListLink(this)" data-url="{{ path('sunshine_crud_delete_js', {'entityName':entityName}) }}/' + row.id + '" type="button" class="btn btn-danger btn-sm" onClick="return confirm(\'Confirmez-vous la suppression ?\')">Supprimer</button>';
                                {% endif %}
                            }
                        }
                        {% endif %}
                    ],
                    {# END of Column Definition #}

                    translate: {
                        records: {
                            processing: 'Patientez s\'il vous plait...',
                            noRecords: 'Aucune donnée'
                        },
                        toolbar: {
                            pagination: {
                                items: {
                                    default: {
                                        first: 'Le premier',
                                        prev: 'Précédent',
                                        next: 'Suivant',
                                        last: 'Le dernier',
                                        more: 'Plus de pages',
                                        input: 'Numéro de page',
                                        select: 'Taille de la liste'
                                    },
                                    {% verbatim %}info: '{{start}} - {{end}} sur {{total}} enregistrements'{% endverbatim %}
                                }
                            }
                        }
                    }
                });


                // var query = datatable.getDataSourceQuery();
                var query = datatable.getDataSourceQuery();

                $('.{{ widgetName }}-portlet #m_form_search').on('keyup', function (e) {
                    datatable.spinnerCallback(true);
                    datatable.search($(this).val());
                });

                // UpdateFilters
                $("body").find('.{{ widgetName }}-portlet .filterElement').each(function (index, item) {

                    var name = item.name;
                    name = name.replace("filters[", "");
                    name = name.replace ("]", "");

                    $(item).on('change', function () {
                        datatable.spinnerCallback(true);
                        datatable.search($(this).val(), name);
                    }).val(typeof query.Type !== 'undefined' ? query.Type : '');
                });


                $('form[name="filters"]').submit(function() {
                    return false;
                });
            });

        </script>

    </div>

</div>
